<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/component/right_scripts_col/scripts_of_selected_folder.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/right_scripts_col/scripts_of_selected_folder.rs" />
              <option name="originalContent" value="use crate::component::right_scripts_col::confirm_delete_script_window::confirm_delete_script_window;&#10;use crate::component::right_scripts_col::scripts_col::ScriptsColumn;&#10;use crate::prisma::shell_script::Data;&#10;use eframe::epaint::Color32;&#10;use egui::Ui;&#10;&#10;impl ScriptsColumn {&#10;    pub fn scripts_of_selected_folder(&amp;mut self, ui: &amp;mut Ui) {&#10;        crate::with_folder_state(|state| {&#10;            egui::ScrollArea::vertical().show(ui, |ui| {&#10;                crate::component::right_scripts_col::scripts_col::with_scritps_from_selected_folder(&#10;                    |scripts| {&#10;                        for script in scripts.iter() {&#10;                            self.script_item(ui, &amp;script);&#10;                        }&#10;                    },&#10;                );&#10;            });&#10;        })&#10;    }&#10;&#10;    fn script_item(&amp;mut self, ui: &amp;mut Ui, script: &amp;&amp;Data) {&#10;        let frame = egui::Frame::group(ui.style()).fill(ui.visuals().faint_bg_color);&#10;        let frame_response = frame.show(ui, |ui| {&#10;&#10;            ui.horizontal(|ui| {&#10;                // Use built-in bold font&#10;                ui.label(&#10;                    egui::RichText::new(&amp;script.name)&#10;                        .strong()&#10;                        .size(16.0)&#10;                );&#10;&#10;                if ui.button(&quot;Rename&quot;).clicked() {&#10;                    self.renaming_script_id = Some(script.id);&#10;                    self.renaming_name = script.name.clone();&#10;                }&#10;                ui.with_layout(&#10;                    egui::Layout::right_to_left(egui::Align::Center),&#10;                    |ui| {&#10;                        if ui.button(&quot;Execute&quot;).clicked() {&#10;                            // Execute the script command&#10;                            crate::run_terminal_command(script.command.clone());&#10;                        }&#10;                        if ui.button(&quot;Edit&quot;).clicked() {&#10;                            self.editing_script_id = Some(script.id);&#10;                            self.editing_command = script.command.clone();&#10;                        }&#10;                        if ui.button(&quot;Copy&quot;).clicked() {&#10;                            ui.ctx().copy_text(script.command.clone());&#10;                        }&#10;&#10;                        if ui.button(&quot;Delete&quot;).clicked() {&#10;                            self.script_to_delete = Some(script.id);&#10;                        }&#10;                    },&#10;                );&#10;            });&#10;            ui.label(&quot;Command:&quot;);&#10;            ui.add_space(2.0);&#10;            egui::Frame::NONE&#10;                .fill(ui.visuals().code_bg_color)&#10;                .show(ui, |ui| {&#10;                    ui.add(&#10;                        egui::TextEdit::multiline(&amp;mut script.command.clone())&#10;                            .font(egui::TextStyle::Monospace)&#10;                            .interactive(false)&#10;                            .frame(false)&#10;                            .desired_rows(5)&#10;                            .desired_width(f32::INFINITY),&#10;                    );&#10;                });&#10;        });&#10;        let response = &amp;frame_response.response;&#10;        if response.hovered() {&#10;            ui.ctx().set_cursor_icon(egui::CursorIcon::PointingHand);&#10;            // Paint a semi-transparent overlay on hover&#10;            ui.painter().rect_filled(&#10;                response.rect,&#10;                4.0,                                           // corner radius&#10;                Color32::from_rgba_premultiplied(0, 0, 0, 30), // hover color&#10;            );&#10;        }&#10;        // Check for double-click on the frame background&#10;        if ui.input(|i| {&#10;            i.pointer&#10;                .button_double_clicked(egui::PointerButton::Primary)&#10;        }) {&#10;            if let Some(pos) = ui.input(|i| i.pointer.interact_pos()) {&#10;                if frame_response.response.rect.contains(pos) {&#10;                    crate::run_terminal_command(script.command.clone());&#10;                }&#10;            }&#10;        }&#10;&#10;        ui.add_space(10.0);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="use crate::component::right_scripts_col::scripts_col::ScriptsColumn;&#10;use crate::prisma::shell_script::Data;&#10;use eframe::epaint::Color32;&#10;use egui::Ui;&#10;&#10;impl ScriptsColumn {&#10;    pub fn scripts_of_selected_folder(&amp;mut self, ui: &amp;mut Ui) {&#10;        crate::with_folder_state(|state| {&#10;            egui::ScrollArea::vertical().show(ui, |ui| {&#10;                crate::component::right_scripts_col::scripts_col::with_scritps_from_selected_folder(&#10;                    |scripts| {&#10;                        for script in scripts.iter() {&#10;                            self.script_item(ui, &amp;script);&#10;                        }&#10;                    },&#10;                );&#10;            });&#10;        })&#10;    }&#10;&#10;    fn script_item(&amp;mut self, ui: &amp;mut Ui, script: &amp;&amp;Data) {&#10;        let frame = egui::Frame::group(ui.style()).fill(ui.visuals().faint_bg_color);&#10;        let frame_response = frame.show(ui, |ui| {&#10;&#10;            ui.horizontal(|ui| {&#10;                // Use built-in bold font&#10;                ui.label(&#10;                    egui::RichText::new(&amp;script.name)&#10;                        .strong()&#10;                        .size(16.0)&#10;                );&#10;&#10;                if ui.button(&quot;Rename&quot;).clicked() {&#10;                    self.renaming_script_id = Some(script.id);&#10;                    self.renaming_name = script.name.clone();&#10;                }&#10;                ui.with_layout(&#10;                    egui::Layout::right_to_left(egui::Align::Center),&#10;                    |ui| {&#10;                        if ui.button(&quot;Execute&quot;).clicked() {&#10;                            // Execute the script command&#10;                            crate::run_terminal_command(script.command.clone());&#10;                        }&#10;                        if ui.button(&quot;Edit&quot;).clicked() {&#10;                            self.editing_script_id = Some(script.id);&#10;                            self.editing_command = script.command.clone();&#10;                        }&#10;                        if ui.button(&quot;Copy&quot;).clicked() {&#10;                            ui.ctx().copy_text(script.command.clone());&#10;                        }&#10;&#10;                        if ui.button(&quot;Delete&quot;).clicked() {&#10;                            self.script_to_delete = Some(script.id);&#10;                        }&#10;                    },&#10;                );&#10;            });&#10;            ui.label(&quot;Command:&quot;);&#10;            ui.add_space(2.0);&#10;            egui::Frame::NONE&#10;                .fill(ui.visuals().code_bg_color)&#10;                .show(ui, |ui| {&#10;                    ui.add(&#10;                        egui::TextEdit::multiline(&amp;mut script.command.clone())&#10;                            .font(egui::TextStyle::Monospace)&#10;                            .interactive(false)&#10;                            .frame(false)&#10;                            .desired_rows(5)&#10;                            .desired_width(f32::INFINITY),&#10;                    );&#10;                });&#10;        });&#10;        let response = &amp;frame_response.response;&#10;        if response.hovered() {&#10;            ui.ctx().set_cursor_icon(egui::CursorIcon::PointingHand);&#10;            // Paint a semi-transparent overlay on hover&#10;            ui.painter().rect_filled(&#10;                response.rect,&#10;                4.0,                                           // corner radius&#10;                Color32::from_rgba_premultiplied(0, 0, 0, 30), // hover color&#10;            );&#10;        }&#10;        // Check for double-click on the frame background&#10;        if ui.input(|i| {&#10;            i.pointer&#10;                .button_double_clicked(egui::PointerButton::Primary)&#10;        }) {&#10;            if let Some(pos) = ui.input(|i| i.pointer.interact_pos()) {&#10;                if frame_response.response.rect.contains(pos) {&#10;                    crate::run_terminal_command(script.command.clone());&#10;                }&#10;            }&#10;        }&#10;&#10;        ui.add_space(10.0);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>